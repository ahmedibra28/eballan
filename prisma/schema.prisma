generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  email               String   @unique
  name                String
  image               String?
  mobile              Int?
  address             String?
  bio                 String?
  password            String
  confirmed           Boolean  @default(false)
  blocked             Boolean  @default(false)
  resetPasswordToken  String?
  resetPasswordExpire BigInt?
  verificationToken   String?
  verificationExpire  BigInt?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  role        Role          @relation(fields: [roleId], references: [id], onDelete: Restrict)
  roleId      String
  reservation Reservation[]

  @@map("users")
}

model Role {
  id          String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  name        String   @unique
  type        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users             User[]
  permissions       Permission[]
  clientPermissions ClientPermission[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  name        String
  method      Method
  route       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  role Role[]

  @@unique([method, route])
  @@map("permissions")
}

model ClientPermission {
  id          String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  name        String   @unique
  sort        Int
  menu        String
  path        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  role Role[]

  @@map("client_permissions")
}

model Airline {
  id                String  @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  name              String
  api               String  @unique
  adultCommission   Int
  childCommission   Int
  infantCommission  Int
  logo              String
  username          String
  password          String
  accessToken       String?
  refreshToken      String?
  accessTokenExpiry BigInt?

  flights Flight[]

  status Status @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("airlines")
}

model Passenger {
  id             String       @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  passengerTitle String
  firstName      String
  secondName     String
  lastName       String
  country        String
  countryId      Int
  sex            String
  dob            String
  passengerType  String
  reservation    Reservation? @relation(fields: [reservationId], references: [id], onDelete: Restrict)
  reservationId  String?      @db.VarChar(21)

  @@map("passengers")
}

model Price {
  id              String       @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  passenger       String
  commission      Int
  fare            Int
  baggageWeight   Int
  handCarryWeight Int
  totalPrice      Int
  reservation     Reservation? @relation(fields: [reservationId], references: [id], onDelete: Restrict)
  reservationId   String?      @db.VarChar(21)

  @@map("prices")
}

model Flight {
  id                          String       @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  segmentNumber               Int
  ticketTypeId                Int
  flightRouteId               Int
  flightScheduleId            Int
  departureDate               String
  arrivalDate                 String
  fromCityName                String
  toCityName                  String
  fromAirportName             String
  toAirportName               String
  fromCityCode                String
  toCityCode                  String
  fromCountryName             String
  toCountryName               String
  fromCountryId               Int
  toCountryId                 Int
  fromCountryIsoCode3         String
  toCountryIsoCode3           String
  adultNumberOfSeatsAvailable Int
  childNumberOfSeatsAvailable Int
  reservation                 Reservation?

  airline   Airline @relation(fields: [airlineId], references: [id], onDelete: Restrict)
  airlineId String  @db.VarChar(21)

  @@map("flight")
}

model Reservation {
  id            String @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  reservationId Int
  pnrNumber     String
  status        Status @default(ACTIVE)
  adult         Int
  child         Int
  infant        Int
  phone         String
  paymentMethod String

  passengers Passenger[]
  prices     Price[]

  flight   Flight? @relation(fields: [flightId], references: [id], onDelete: Restrict)
  flightId String? @unique

  createdBy   User?   @relation(fields: [createdById], references: [id], onDelete: Restrict)
  createdById String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([reservationId, pnrNumber])
  @@map("reservations")
}

enum Method {
  GET
  POST
  PUT
  DELETE
}

enum Status {
  ACTIVE
  INACTIVE
  BOOKED
}
